package br.com.danielsan.dscontacts.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import android.graphics.Bitmap;
import br.com.danielsan.dscontacts.dao.converters.BitmapPropertyConverter;
import br.com.danielsan.dscontacts.dao.converters.NamePropertyConverter;

import br.com.danielsan.dscontacts.dao.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Favorite = new Property(2, boolean.class, "favorite", false, "FAVORITE");
        public final static Property Picture = new Property(3, byte[].class, "picture", false, "PICTURE");
        public final static Property Color = new Property(4, int.class, "color", false, "COLOR");
        public final static Property Organization = new Property(5, String.class, "organization", false, "ORGANIZATION");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property CreatedAt = new Property(7, java.util.Date.class, "createdAt", false, "CREATED_AT");
    };

    private DaoSession daoSession;

    private final NamePropertyConverter nameConverter = new NamePropertyConverter();
    private final BitmapPropertyConverter pictureConverter = new BitmapPropertyConverter();

    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"FAVORITE\" INTEGER NOT NULL ," + // 2: favorite
                "\"PICTURE\" BLOB," + // 3: picture
                "\"COLOR\" INTEGER NOT NULL ," + // 4: color
                "\"ORGANIZATION\" TEXT," + // 5: organization
                "\"TITLE\" TEXT," + // 6: title
                "\"CREATED_AT\" INTEGER NOT NULL );"); // 7: createdAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, nameConverter.convertToDatabaseValue(entity.getName()));
        stmt.bindLong(3, entity.getFavorite() ? 1L: 0L);
 
        Bitmap picture = entity.getPicture();
        if (picture != null) {
            stmt.bindBlob(4, pictureConverter.convertToDatabaseValue(picture));
        }
        stmt.bindLong(5, entity.getColor());
 
        String organization = entity.getOrganization();
        if (organization != null) {
            stmt.bindString(6, organization);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getCreatedAt().getTime());
    }

    @Override
    protected void attachEntity(Contact entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            nameConverter.convertToEntityProperty(cursor.getString(offset + 1)), // name
            cursor.getShort(offset + 2) != 0, // favorite
            cursor.isNull(offset + 3) ? null : pictureConverter.convertToEntityProperty(cursor.getBlob(offset + 3)), // picture
            cursor.getInt(offset + 4), // color
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // organization
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            new java.util.Date(cursor.getLong(offset + 7)) // createdAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(nameConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setFavorite(cursor.getShort(offset + 2) != 0);
        entity.setPicture(cursor.isNull(offset + 3) ? null : pictureConverter.convertToEntityProperty(cursor.getBlob(offset + 3)));
        entity.setColor(cursor.getInt(offset + 4));
        entity.setOrganization(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
