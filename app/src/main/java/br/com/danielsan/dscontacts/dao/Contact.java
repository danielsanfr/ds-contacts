package br.com.danielsan.dscontacts.dao;

import java.util.List;

import br.com.danielsan.dscontacts.models.Name;
import de.greenrobot.dao.DaoException;

import android.graphics.Bitmap;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTACT".
 */
public class Contact {

    private Long id;
    /** Not-null value. */
    private Name name;
    private boolean favorite;
    private Bitmap picture;
    private int color;
    private String organization;
    private String title;
    /** Not-null value. */
    private java.util.Date createdAt;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDao myDao;

    private List<Nickname> nicknameList;
    private List<Note> noteList;
    private List<Website> websiteList;
    private List<Address> addressList;
    private List<Email> emailList;
    private List<Event> eventList;
    private List<InstantMessage> instantMessageList;
    private List<Phone> phoneList;
    private List<Relationship> relationshipList;

    public Contact() {
    }

    public Contact(Long id) {
        this.id = id;
    }

    public Contact(Long id, Name name, boolean favorite, Bitmap picture, int color, String organization, String title, java.util.Date createdAt) {
        this.id = id;
        this.name = name;
        this.favorite = favorite;
        this.picture = picture;
        this.color = color;
        this.organization = organization;
        this.title = title;
        this.createdAt = createdAt;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public Name getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(Name name) {
        this.name = name;
    }

    public boolean getFavorite() {
        return favorite;
    }

    public void setFavorite(boolean favorite) {
        this.favorite = favorite;
    }

    public Bitmap getPicture() {
        return picture;
    }

    public void setPicture(Bitmap picture) {
        this.picture = picture;
    }

    public int getColor() {
        return color;
    }

    public void setColor(int color) {
        this.color = color;
    }

    public String getOrganization() {
        return organization;
    }

    public void setOrganization(String organization) {
        this.organization = organization;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Nickname> getNicknameList() {
        if (nicknameList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NicknameDao targetDao = daoSession.getNicknameDao();
            List<Nickname> nicknameListNew = targetDao._queryContact_NicknameList(id);
            synchronized (this) {
                if(nicknameList == null) {
                    nicknameList = nicknameListNew;
                }
            }
        }
        return nicknameList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNicknameList() {
        nicknameList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Note> getNoteList() {
        if (noteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteDao targetDao = daoSession.getNoteDao();
            List<Note> noteListNew = targetDao._queryContact_NoteList(id);
            synchronized (this) {
                if(noteList == null) {
                    noteList = noteListNew;
                }
            }
        }
        return noteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoteList() {
        noteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Website> getWebsiteList() {
        if (websiteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WebsiteDao targetDao = daoSession.getWebsiteDao();
            List<Website> websiteListNew = targetDao._queryContact_WebsiteList(id);
            synchronized (this) {
                if(websiteList == null) {
                    websiteList = websiteListNew;
                }
            }
        }
        return websiteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWebsiteList() {
        websiteList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Address> getAddressList() {
        if (addressList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AddressDao targetDao = daoSession.getAddressDao();
            List<Address> addressListNew = targetDao._queryContact_AddressList(id);
            synchronized (this) {
                if(addressList == null) {
                    addressList = addressListNew;
                }
            }
        }
        return addressList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAddressList() {
        addressList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Email> getEmailList() {
        if (emailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EmailDao targetDao = daoSession.getEmailDao();
            List<Email> emailListNew = targetDao._queryContact_EmailList(id);
            synchronized (this) {
                if(emailList == null) {
                    emailList = emailListNew;
                }
            }
        }
        return emailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEmailList() {
        emailList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Event> getEventList() {
        if (eventList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            List<Event> eventListNew = targetDao._queryContact_EventList(id);
            synchronized (this) {
                if(eventList == null) {
                    eventList = eventListNew;
                }
            }
        }
        return eventList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEventList() {
        eventList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<InstantMessage> getInstantMessageList() {
        if (instantMessageList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InstantMessageDao targetDao = daoSession.getInstantMessageDao();
            List<InstantMessage> instantMessageListNew = targetDao._queryContact_InstantMessageList(id);
            synchronized (this) {
                if(instantMessageList == null) {
                    instantMessageList = instantMessageListNew;
                }
            }
        }
        return instantMessageList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInstantMessageList() {
        instantMessageList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Phone> getPhoneList() {
        if (phoneList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneDao targetDao = daoSession.getPhoneDao();
            List<Phone> phoneListNew = targetDao._queryContact_PhoneList(id);
            synchronized (this) {
                if(phoneList == null) {
                    phoneList = phoneListNew;
                }
            }
        }
        return phoneList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPhoneList() {
        phoneList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Relationship> getRelationshipList() {
        if (relationshipList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RelationshipDao targetDao = daoSession.getRelationshipDao();
            List<Relationship> relationshipListNew = targetDao._queryContact_RelationshipList(id);
            synchronized (this) {
                if(relationshipList == null) {
                    relationshipList = relationshipListNew;
                }
            }
        }
        return relationshipList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRelationshipList() {
        relationshipList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
